# import random  # nosec
# from datetime import timedelta
# from decimal import Decimal
#
# from django.contrib.auth import get_user_model
# from django.core.management.base import BaseCommand
# from django.utils import timezone
#
# from shop.models import Order, OrderItem, Product
#
# User = get_user_model()
#
#
# class Command(BaseCommand):
#     help = "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"
#
#     def handle(self, *args, **options):
#         self.stdout.write(self.style.SUCCESS("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö..."))
#
#         # –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–∫–∞–∑—ã –¥–ª—è –ª—É—á—à–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
#         self.create_analytical_orders()
#
#         # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
#         self.update_stock_levels()
#
#         self.stdout.write(self.style.SUCCESS("‚úÖ –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!"))
#
#     def create_analytical_orders(self):
#         """–°–æ–∑–¥–∞–µ—Ç –∑–∞–∫–∞–∑—ã —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
#         customers = User.objects.filter(role="customer")
#         products = Product.objects.filter(available=True)
#
#         if not customers.exists() or not products.exists():
#             self.stdout.write(self.style.WARNING("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤"))
#             return
#
#         # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 90 –¥–Ω–µ–π —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç—Ä–µ–Ω–¥–∞–º–∏
#         for days_ago in range(90):
#             date = timezone.now() - timedelta(days=days_ago)
#
#             # –ë–æ–ª—å—à–µ –∑–∞–∫–∞–∑–æ–≤ –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ –∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏
#             orders_count = random.randint(2, 8)  # nosec
#             if date.weekday() >= 5:  # –í—ã—Ö–æ–¥–Ω—ã–µ
#                 orders_count = random.randint(5, 12)  # nosec
#
#             for _ in range(orders_count):
#                 customer = random.choice(customers)  # nosec
#
#                 order = Order.objects.create(
#                     user=customer,
#                     first_name=customer.first_name or f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—å{random.randint(1, 100)}",  # nosec
#                     last_name=customer.last_name or f"–¢–µ—Å—Ç–æ–≤—ã–π{random.randint(1, 100)}",  # nosec
#                     email=customer.email or f"test{random.randint(1, 1000)}@example.com",  # nosec
#                     phone=f"+7{random.randint(9000000000, 9999999999)}",  # nosec
#                     address=f"—É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, –¥. {random.randint(1, 100)}",  # nosec
#                     city="–ú–æ—Å–∫–≤–∞",
#                     postal_code=f"{random.randint(100000, 199999)}",  # nosec
#                     status=random.choices(  # nosec
#                         ["pending", "processing", "shipped", "delivered", "cancelled"],
#                         weights=[10, 20, 15, 50, 5],  # –ë–æ–ª—å—à–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
#                     )[0],
#                     created_at=date,
#                     total_price=0,
#                 )
#
#                 # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑
#                 num_items = random.randint(1, 4)  # nosec
#                 total_price = Decimal("0")
#
#                 selected_products = random.sample(list(products), min(num_items, len(products)))   # nosec
#
#                 for product in selected_products:
#                     quantity = random.randint(1, 3)   # nosec
#                     price = product.price
#
#                     OrderItem.objects.create(
#                         order=order, product=product, price=price, quantity=quantity
#                     )
#
#                     total_price += price * quantity
#
#                 order.total_price = total_price
#                 order.save()
#
#         self.stdout.write("üìä –°–æ–∑–¥–∞–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
#
#     def update_stock_levels(self):
#         """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
#         products = Product.objects.all()
#
#         # –î–µ–ª–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º
#         low_stock_products = random.sample(list(products), min(5, len(products)))   # nosec
#
#         for product in low_stock_products:
#             product.stock = random.randint(1, 4)    # nosec
#             product.save()
#             self.stdout.write(f'‚ö†Ô∏è –¢–æ–≤–∞—Ä "{product.name}" - –æ—Å—Ç–∞—Ç–æ–∫: {product.stock}')
#
#         # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã —Å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º –æ—Å—Ç–∞—Ç–∫–æ–º
#         for product in products:
#             if product not in low_stock_products:
#                 product.stock = random.randint(10, 50)    # nosec
#                 product.save()
