# import random  # nosec B311 - not for crypto
# from datetime import timedelta
# from decimal import Decimal
#
# from django.contrib.auth import get_user_model
# from django.core.management.base import BaseCommand
# from django.db.models import Sum
# from django.utils import timezone
#
# from shop.models import Category, Order, OrderItem, Product
#
# User = get_user_model()
#
# class Command(BaseCommand):
#     help = "–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞"
#
#
#     def add_arguments(self, parser):
#         parser.add_argument(
#             "--orders", type=int, default=50, help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è"
#         )
#         parser.add_argument(
#             "--products", type=int, default=30, help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è"
#         )
#     #
#
#     def handle(self, *args, **options):
#         self.stdout.write(self.style.SUCCESS("üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö..."))
#
#         # –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
#         categories_data = [
#             {
#                 "name": "–ú—É–∂—Å–∫–∞—è –æ–¥–µ–∂–¥–∞",
#                 "slug": "mens-clothing",
#                 "description": "–°—Ç–∏–ª—å–Ω–∞—è –º—É–∂—Å–∫–∞—è –æ–¥–µ–∂–¥–∞",
#             },
#             {
#                 "name": "–ñ–µ–Ω—Å–∫–∞—è –æ–¥–µ–∂–¥–∞",
#                 "slug": "womens-clothing",
#                 "description": "–ú–æ–¥–Ω–∞—è –∂–µ–Ω—Å–∫–∞—è –æ–¥–µ–∂–¥–∞",
#             },
#             {"name": "–û–±—É–≤—å", "slug": "shoes", "description": "–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –æ–±—É–≤—å"},
#             {
#                 "name": "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã",
#                 "slug": "accessories",
#                 "description": "–°—Ç–∏–ª—å–Ω—ã–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã",
#             },
#             {
#                 "name": "–°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è –æ–¥–µ–∂–¥–∞",
#                 "slug": "sportswear",
#                 "description": "–û–¥–µ–∂–¥–∞ –¥–ª—è —Å–ø–æ—Ä—Ç–∞",
#             },
#             {
#                 "name": "–î–µ—Ç—Å–∫–∞—è –æ–¥–µ–∂–¥–∞",
#                 "slug": "kids-clothing",
#                 "description": "–û–¥–µ–∂–¥–∞ –¥–ª—è –¥–µ—Ç–µ–π",
#             },
#             {
#                 "name": "–ù–∏–∂–Ω–µ–µ –±–µ–ª—å–µ",
#                 "slug": "underwear",
#                 "description": "–ö–æ–º—Ñ–æ—Ä—Ç–Ω–æ–µ –Ω–∏–∂–Ω–µ–µ –±–µ–ª—å–µ",
#             },
#             {
#                 "name": "–í–µ—Ä—Ö–Ω—è—è –æ–¥–µ–∂–¥–∞",
#                 "slug": "outerwear",
#                 "description": "–ö—É—Ä—Ç–∫–∏ –∏ –ø–∞–ª—å—Ç–æ",
#             },
#         ]
#
#         for cat_data in categories_data:
#             category, created = Category.objects.get_or_create(
#                 slug=cat_data["slug"], defaults=cat_data
#             )
#             if created:
#                 self.stdout.write(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name}")
#
#         # –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
#         customers_data = [
#             {
#                 "username": "anna_smith",
#                 "first_name": "–ê–Ω–Ω–∞",
#                 "last_name": "–°–º–∏—Ä–Ω–æ–≤–∞",
#                 "email": "anna@example.com",
#             },
#             {
#                 "username": "ivan_petrov",
#                 "first_name": "–ò–≤–∞–Ω",
#                 "last_name": "–ü–µ—Ç—Ä–æ–≤",
#                 "email": "ivan@example.com",
#             },
#             {
#                 "username": "maria_jones",
#                 "first_name": "–ú–∞—Ä–∏—è",
#                 "last_name": "–î–∂–æ–Ω—Å",
#                 "email": "maria@example.com",
#             },
#             {
#                 "username": "alex_brown",
#                 "first_name": "–ê–ª–µ–∫—Å–µ–π",
#                 "last_name": "–ë—Ä–∞—É–Ω",
#                 "email": "alex@example.com",
#             },
#             {
#                 "username": "elena_white",
#                 "first_name": "–ï–ª–µ–Ω–∞",
#                 "last_name": "–£–∞–π—Ç",
#                 "email": "elena@example.com",
#             },
#         ]
#
#         for customer_data in customers_data:
#             user, created = User.objects.get_or_create(
#                 username=customer_data["username"],
#                 defaults={**customer_data, "role": "customer"},
#             )
#             if created:
#                 user.set_password("demo123")
#                 user.save()
#                 self.stdout.write(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–∫—É–ø–∞—Ç–µ–ª—å: {user.username}")
#
#         # –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä—ã
#         products_data = [
#             # –ú—É–∂—Å–∫–∞—è –æ–¥–µ–∂–¥–∞
#             {
#                 "name": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è —Ä—É–±–∞—à–∫–∞",
#                 "category": "mens-clothing",
#                 "price": 2500,
#                 "description": "–≠–ª–µ–≥–∞–Ω—Ç–Ω–∞—è –º—É–∂—Å–∫–∞—è —Ä—É–±–∞—à–∫–∞ –∏–∑ —Ö–ª–æ–ø–∫–∞",
#             },
#             {
#                 "name": "–î–µ–ª–æ–≤–æ–π –∫–æ—Å—Ç—é–º",
#                 "category": "mens-clothing",
#                 "price": 15000,
#                 "description": "–°—Ç–∏–ª—å–Ω—ã–π –¥–µ–ª–æ–≤–æ–π –∫–æ—Å—Ç—é–º",
#             },
#             {
#                 "name": "–î–∂–∏–Ω—Å—ã –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ",
#                 "category": "mens-clothing",
#                 "price": 3500,
#                 "description": "–£–¥–æ–±–Ω—ã–µ –º—É–∂—Å–∫–∏–µ –¥–∂–∏–Ω—Å—ã",
#             },
#             {
#                 "name": "–ü–æ–ª–æ —Ä—É–±–∞—à–∫–∞",
#                 "category": "mens-clothing",
#                 "price": 1800,
#                 "description": "–°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è –ø–æ–ª–æ —Ä—É–±–∞—à–∫–∞",
#             },
#             # –ñ–µ–Ω—Å–∫–∞—è –æ–¥–µ–∂–¥–∞
#             {
#                 "name": "–õ–µ—Ç–Ω–µ–µ –ø–ª–∞—Ç—å–µ",
#                 "category": "womens-clothing",
#                 "price": 4500,
#                 "description": "–õ–µ–≥–∫–æ–µ –ª–µ—Ç–Ω–µ–µ –ø–ª–∞—Ç—å–µ",
#             },
#             {
#                 "name": "–î–µ–ª–æ–≤–∞—è –±–ª—É–∑–∫–∞",
#                 "category": "womens-clothing",
#                 "price": 2800,
#                 "description": "–≠–ª–µ–≥–∞–Ω—Ç–Ω–∞—è –±–ª—É–∑–∫–∞ –¥–ª—è –æ—Ñ–∏—Å–∞",
#             },
#             {
#                 "name": "–î–∂–∏–Ω—Å—ã —Å–∫–∏–Ω–Ω–∏",
#                 "category": "womens-clothing",
#                 "price": 3200,
#                 "description": "–ú–æ–¥–Ω—ã–µ –∂–µ–Ω—Å–∫–∏–µ –¥–∂–∏–Ω—Å—ã",
#             },
#             {
#                 "name": "–í–µ—á–µ—Ä–Ω–µ–µ –ø–ª–∞—Ç—å–µ",
#                 "category": "womens-clothing",
#                 "price": 8500,
#                 "description": "–†–æ—Å–∫–æ—à–Ω–æ–µ –≤–µ—á–µ—Ä–Ω–µ–µ –ø–ª–∞—Ç—å–µ",
#             },
#             # –û–±—É–≤—å
#             {
#                 "name": "–ö—Ä–æ—Å—Å–æ–≤–∫–∏ Nike",
#                 "category": "shoes",
#                 "price": 6500,
#                 "description": "–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –∫—Ä–æ—Å—Å–æ–≤–∫–∏ Nike",
#             },
#             {
#                 "name": "–¢—É—Ñ–ª–∏ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ",
#                 "category": "shoes",
#                 "price": 4200,
#                 "description": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –∫–æ–∂–∞–Ω—ã–µ —Ç—É—Ñ–ª–∏",
#             },
#             {
#                 "name": "–ë–æ—Ç–∏–Ω–∫–∏ –∑–∏–º–Ω–∏–µ",
#                 "category": "shoes",
#                 "price": 5800,
#                 "description": "–¢–µ–ø–ª—ã–µ –∑–∏–º–Ω–∏–µ –±–æ—Ç–∏–Ω–∫–∏",
#             },
#             {
#                 "name": "–°–∞–Ω–¥–∞–ª–∏–∏ –ª–µ—Ç–Ω–∏–µ",
#                 "category": "shoes",
#                 "price": 2200,
#                 "description": "–£–¥–æ–±–Ω—ã–µ –ª–µ—Ç–Ω–∏–µ —Å–∞–Ω–¥–∞–ª–∏–∏",
#             },
#             # –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã
#             {
#                 "name": "–ö–æ–∂–∞–Ω—ã–π —Ä–µ–º–µ–Ω—å",
#                 "category": "accessories",
#                 "price": 1500,
#                 "description": "–°—Ç–∏–ª—å–Ω—ã–π –∫–æ–∂–∞–Ω—ã–π —Ä–µ–º–µ–Ω—å",
#             },
#             {
#                 "name": "–ù–∞—Ä—É—á–Ω—ã–µ —á–∞—Å—ã",
#                 "category": "accessories",
#                 "price": 12000,
#                 "description": "–≠–ª–µ–≥–∞–Ω—Ç–Ω—ã–µ –Ω–∞—Ä—É—á–Ω—ã–µ —á–∞—Å—ã",
#             },
#             {
#                 "name": "–ö–æ—à–µ–ª–µ–∫ –∫–æ–∂–∞–Ω—ã–π",
#                 "category": "accessories",
#                 "price": 2800,
#                 "description": "–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–∂–∞–Ω—ã–π –∫–æ—à–µ–ª–µ–∫",
#             },
#             {
#                 "name": "–°–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç–Ω—ã–µ –æ—á–∫–∏",
#                 "category": "accessories",
#                 "price": 3500,
#                 "description": "–ú–æ–¥–Ω—ã–µ —Å–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç–Ω—ã–µ –æ—á–∫–∏",
#             },
#             # –°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è –æ–¥–µ–∂–¥–∞
#             {
#                 "name": "–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∫–æ—Å—Ç—é–º",
#                 "category": "sportswear",
#                 "price": 4500,
#                 "description": "–£–¥–æ–±–Ω—ã–π —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∫–æ—Å—Ç—é–º",
#             },
#             {
#                 "name": "–§—É—Ç–±–æ–ª–∫–∞ –¥–ª—è –±–µ–≥–∞",
#                 "category": "sportswear",
#                 "price": 1200,
#                 "description": "–î—ã—à–∞—â–∞—è —Ñ—É—Ç–±–æ–ª–∫–∞ –¥–ª—è —Å–ø–æ—Ä—Ç–∞",
#             },
#             {
#                 "name": "–õ–µ–≥–≥–∏–Ω—Å—ã –¥–ª—è –π–æ–≥–∏",
#                 "category": "sportswear",
#                 "price": 2200,
#                 "description": "–≠–ª–∞—Å—Ç–∏—á–Ω—ã–µ –ª–µ–≥–≥–∏–Ω—Å—ã",
#             },
#             {
#                 "name": "–¢–æ–ª—Å—Ç–æ–≤–∫–∞ —Å –∫–∞–ø—é—à–æ–Ω–æ–º",
#                 "category": "sportswear",
#                 "price": 3200,
#                 "description": "–¢–µ–ø–ª–∞—è —Å–ø–æ—Ä—Ç–∏–≤–Ω–∞—è —Ç–æ–ª—Å—Ç–æ–≤–∫–∞",
#             },
#         ]
#
#         for i, prod_data in enumerate(products_data[: options["products"]]):
#             try:
#                 category = Category.objects.get(slug=prod_data["category"])
#                 product, created = Product.objects.get_or_create(
#                     slug=f"{prod_data['category']}-{i + 1}",
#                     defaults={
#                         "name": prod_data["name"],
#                         "category": category,
#                         "description": prod_data["description"],
#                         "price": Decimal(str(prod_data["price"])),
#                         "stock": random.randint(5, 50),  #nosec B311 - not for crypto
#                         "available": True,
#                     },
#                 )
#                 if created:
#                     self.stdout.write(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–æ–≤–∞—Ä: {product.name}")
#             except Category.DoesNotExist:
#                 self.stdout.write(f'‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è {prod_data["category"]} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
#
#         # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑—ã
#         customers = User.objects.filter(role="customer")
#         products = Product.objects.filter(available=True)
#
#         if not customers.exists() or not products.exists():
#             self.stdout.write(self.style.ERROR("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤"))
#             return
#
#         statuses = ["pending", "processing", "shipped", "delivered", "cancelled"]
#
#         for i in range(options["orders"]):
#             # –°–ª—É—á–∞–π–Ω–∞—è –¥–∞—Ç–∞ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 60 –¥–Ω–µ–π
#             days_ago = random.randint(0, 60)  #nosec B311 - not for crypto
#             order_date = timezone.now() - timedelta(days=days_ago)
#
#             customer = random.choice(customers)  #nosec B311 - not for crypto
#
#             order = Order.objects.create(
#                 user=customer,
#                 first_name=customer.first_name or "–ò–º—è",
#                 last_name=customer.last_name or "–§–∞–º–∏–ª–∏—è",
#                 email=customer.email,
#                 phone=f"+7{random.randint(9000000000, 9999999999)}",  #nosec B311 - not for crypto
#                 address=f"—É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. {random.randint(1, 100)}",  #osec B311 - not for crypto
#                 city="–ú–æ—Å–∫–≤–∞",
#                 postal_code=f"{random.randint(100000, 199999)}", #nosec B311 - not for crypto
#                 status=random.choice(statuses), #nosec B311 - not for crypto
#                 created_at=order_date,
#                 total_price=0,  # –ë—É–¥–µ—Ç –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–æ –Ω–∏–∂–µ
#             )
#
#             # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑
#             num_items = random.randint(1, 5)  #nosec B311 - not for crypto
#             total_price = Decimal("0")
#
#             for _ in range(num_items):
#                 product = random.choice(products)  #nosec B311 - not for crypto
#                 quantity = random.randint(1, 3)  #nosec B311 - not for crypto
#                 price = product.price
#
#                 OrderItem.objects.create(
#                     order=order, product=product, price=price, quantity=quantity
#                 )
#
#                 total_price += price * quantity
#
#             order.total_price = total_price
#             order.save()
#
#             if i % 10 == 0:
#                 self.stdout.write(f'üì¶ –°–æ–∑–¥–∞–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {i + 1}/{options["orders"]}')
#
#         # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
#         total_orders = Order.objects.count()
#         total_products = Product.objects.count()
#         total_customers = User.objects.filter(role="customer").count()
#         total_revenue = Order.objects.aggregate(total=Sum("total_price"))["total"] or 0
#
#         self.stdout.write(self.style.SUCCESS("\nüéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"))
#         self.stdout.write("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
#         self.stdout.write(f"   üë• –ü–æ–∫—É–ø–∞—Ç–µ–ª–µ–π: {total_customers}")
#         self.stdout.write(f"   üì¶ –¢–æ–≤–∞—Ä–æ–≤: {total_products}")
#         self.stdout.write(f"   üõí –ó–∞–∫–∞–∑–æ–≤: {total_orders}")
#         self.stdout.write(f"   üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {total_revenue} ‚ÇΩ")
#
#         self.stdout.write(
#             self.style.SUCCESS("\n‚ú® –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å dashboard —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏!")
#         )
